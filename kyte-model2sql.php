#!/usr/bin/php
<?php

function print_usage() {
	echo "\n";
	echo "\033[1mUSAGE\033[0m\n\n";
	echo "kyte-model2sql.php \033[1m--engine\033[0m \e[0;31m[InnoDB|MyISAM]\e[0m \033[1m--charset\033[0m \e[0;31m[utf8|...]\e[0m \033[1m--appdir\033[0m \e[0;31m/path/to/kyte/app\e[0m\n\n";
	echo "To view a list of charsets supported by your db, run 'SHOW CHARACTER SET;'\n";
	echo "--appdir should point to the root dir where kyte-php was cloned\n";
	echo "Tables will be autogenerated for both builtin models and user-defined models found in app/models/*\n\n";
	exit(-1);
}

$longopts  = array(
    "engine:",		// Required value
    "charset:",		// Optional value
    "appdir:",		// No value
);
$options = getopt(null, $longopts);

if (!array_key_exists('engine', $options)) print_usage();
if (!array_key_exists('charset', $options)) print_usage();
if (!array_key_exists('appdir', $options)) print_usage();

$builtin_models = $options['appdir']."/builtin/models";
$user_models = $options['appdir']."/app/models";

// check if dirs exists for each of the models
if ( !file_exists( $builtin_models ) && !is_dir( $builtin_models ) ) {
	echo "\n";
	echo "\e[0;31m\033[1mUnable to find $builtin_models.\033[0m\n";
	print_usage();
}

$models = [];

// include models being used by app
foreach (glob("$builtin_models/*.php") as $filename) {
    require_once($filename);
    $model_name = substr($filename, 0, strrpos($filename, "."));
    $model_name = explode('/', $model_name);
    $models[] = end($model_name);
}

/* Load user-defined files */
if ( file_exists( $user_models ) && is_dir( $user_models ) ) {
    // load user defined models and controllers (allow override of builtin)
    foreach (glob("$user_models/*.php") as $filename) {
        require_once($filename);
        $model_name = substr($filename, 0, strrpos($filename, "."));
        $model_name = explode('/', $model_name);
        $models[] = end($model_name);
    }
}

// key-value describing model
// 
//	[
// 		'name'		=> 'name of table (also name of object)',
// 		'struct'	=> [
//			'column name' => [
//				'type'		=>	'i/s/d',		(*required*)
// 				'requred'	=>	true/false,		(*required*)
// 				'pk'		=>	true/false,
// 				'unsigned'	=>	true/false,
// 				'size'		=>	integer,
//				'default'	=>	value,
// 				'precision'	=>	integer,		(* for decimal type *)
// 				'scale'		=>	integer,		(* for decimal type *)
// 				'date'		=>	true/false,		(*required*)
// 				'kms'		=>	true/false,
//		 	],
//			...
//			'column name' => [ 'type' => 'i/s/d', 'requred' => true/false ],
//		]
//	]

$output = '';

// iterate through each model and create sql table
foreach ($models as $model) {
	$tbl_name = $$model['name'];
	$engine = $options['engine'];
	$charset = $options['charset'];
	$cols = $$model['struct'];
	$pk_name = '';	// store col struct for primary key

	$output .= "DROP TABLE IF EXISTS `$tbl_name`;\n";
	$output .= "CREATE TABLE `$tbl_name` (\n";
	// table columns
	foreach ($cols as $name => $attrs) {
		$type_text = (array_key_exists('text', $attrs) ? ($attrs['text'] ? true : false) : false);

		$output .= "\t`$name`";	// column name
		// type, size and if signed or not
		if ($attrs['date']) {
			$output .= ' bigint unsigned';
		} else {
			if ($type_text) {
				$output .= ' text';
			} else {
				if ($attrs['type'] == 'i') {
					$output .= ' int';
					if (array_key_exists('size', $attrs)) {
						$output .= '('.$attrs['size'].')';
					}
					if (array_key_exists('unsigned', $attrs)) {
						$output .= ' unsigned';
					}
				} elseif ($attrs['type'] == 's') {
					$output .= ' varchar';
					if (array_key_exists('size', $attrs)) {
						$output .= '('.$attrs['size'].')';
					} else {
						echo "\n";
						echo "\e[0;31m\033[1mvarchar requires size to be declared for column $name of table $tbl_name.\033[0m\n";
						print_usage();
					}
				} elseif ($attrs['type'] == 'd' && array_key_exists('precision', $attrs) && array_key_exists('scale', $attrs)) {
					$output .= ' decimal('.$attrs['precision'].','.$attrs['scale'].')';
				} else {
					echo "\n";
					echo "\e[0;31m\033[1mUnknown type ".$attrs['type']." for column $name of table $tbl_name.\033[0m\n";
					print_usage();
				}
			}
		}
		if (array_key_exists('default', $attrs)) {
			// default value?
			$output .= ' DEFAULT ';
			$output .= (is_string($attrs['default']) ? "'".$attrs['default']."'" : $attrs['default']);
		}
		$output .= ($attrs['required'] ? ' NOT NULL' : '');		// required?
		if (array_key_exists('pk', $attrs)) {
			// primary key?
			if ($attrs['pk']) {
				$output .= ' AUTO_INCREMENT';
				$pk_name = $name;
			}
		}
		$output .= ",\n";
	}
	// primary key
	$output .= "\tPRIMARY KEY (`$pk_name`)\n";
	$output .= ") ENGINE=$engine DEFAULT CHARSET=$charset;\n\n";
}

file_put_contents('schema.sql', $output);

?>